***FreeBSD linrad notes:***

Linrad support is preliminary and not every feature has been tested because of lack of time and availability of RX hardware. Tests have been done in FreeBSD 14.1 amd64 on a Intel Nuc 8i7 PC  and Lenovo Thinkpad x260 laptop. More tests will be done in the future. We encourage you to send any experiences with Linrad in this operating system in order to improve it. This is the summary of the tests carried out:

-sound cards: work with portaudio package

-Afedri-Net over ethernet: works fine

-Afedri-Net over USB:  it does not work, it segfaults. All receivers that depend on the HID driver do not work at the moment.

-rtl-sdr dongle: It works fine. To make it work not only as root but as an unprivileged user, first you must add your username to the wheel group: 

First check if you are a member of the wheel group:

# pw groupshow wheel

If you are not a member of the wheel group, add it like this:

# pw groupmod wheel -m username

After adding your user to the wheel group, logout and login your X session.

In order to make RTLSDR receiver work, device files in /dev/usb*  must have read and write permissions for the wheel group.

/dev/usb* devices permissions must be 0660. You could make the changes using chmod 0660 /dev/usb* but that would be overwritten in the next reboot. To make them permanent after reboot, add this rule to  /etc/devfs.rules file. If the file  does not exist, create it and add the following two lines:

[rtlsdr=10]
add path 'usb/*' mode 0660 group wheel

also you must add this line to /etc/rc.conf main configuration file:

devfs_system_ruleset="rtlsdr"

# reload the rules with:

# /etc/rc.d/devfs restart

additional installed packages:

gcc13-13.2.0_4                 GNU Compiler Collection 13
nasm-2.16.03,2                 General-purpose multi-platform x86 and amd64 assembler
gmake-4.4.1                    GNU version of 'make' utility
autoconf-2.72                  Generate configure scripts and related files
portaudio-19.6.0_7,1           Portable cross-platform Audio API
rtl-sdr-2.0.2,1                Command-line tool that performs SDR with RTL2832-based USB sticks
pulseaudio-16.1_4              Sound server for UNIX
alsa-lib-1.2.12                ALSA compatibility library

***NetBSD linrad notes:***

Linrad support is preliminary and not every feature has been tested because of lack of time and availability of RX hardware. More tests will be done in the future. We encourage you to send any experiences with Linrad in this operating system in order to improve it. This is the summary of the tests carried out. Tests have been done in NetBSD 10.0 in three different types of systems:

-NetBSD 10.0 amd64  in an Intel Nuc 8i7 PC 
-NetBSD 10.0 amd64  in an Lenovo Thinkpad x260 laptop
-NetBSD 10.0 aarch64  in a Raspberrypi 4 

More tests will be done in the future. We encourage you to send any experiences with Linrad in this operating system in order to improve it. This is the summary of the tests carried out:

-sound cards: work with portaudio package

-Afedri-Net over ethernet: works fine

-Afedri-Net over USB:  it does not work, it segfaults. All receivers that depend on the HID driver do not work at the moment.

-rtl-sdr dongle: It works fine. To make it work not only as root but as an unprivileged user, first you must add your username to the wheel group: 

First check if you are a member of the wheel group:

# groups username

If you are not a member of the wheel group, add it like this:

# usermod -G wheel username

After adding your user to the wheel group, logout and login your X session.

In order to make RTLSDR receiver work, device files in  /dev/ugenx.xx used by the RTLSDR dongle  must have read and write permissions for the wheel group. The trick is adding read and write permissions with chmod command to those devices. It appears that the driver uses two devices, i.e.  /dev/ugen0.00 and /dev/ugen0.01.The exact devices number depend on your system and on the other USB devices connected to the computer. You can use chmod command and give read and write access to the wheel group to all /dev/ugen* files:

# chmod 660 /dev/ugen* 

If you want to be more accurate and give read and write  permissions to the exact files used by the RTLSDR dongle, you have to investigate it further.

Insert the RTLSDR dongle and issue this command:

# dmesg | grep ugen

[ 2,284872] ugen0 at uhub1 port 5
[ 2,314868] ugen0: Generic (0x058f) EMV Smartcard Reader (0x9540), rev 2.01/1.20, addr 2
[ 4,684869] ugen1 at uhub1 port 9
[ 4,714866] ugen1: vendor 138a (0x138a) product 0017 (0x0017), rev 1.10/0.78, addr 6
[55,924948] ugen2 at uhub1 port 1
[55,924948] ugen2: Realtek (0x0bda) RTL2838UHIDIR (0x2838), rev 2.00/1.00, addr 7

You can see that RTLSDR dongle is connected at ugen2.

Lets see the permissions of the device files:

# ls -l /dev/ugen2*

crw-------  1 root  wheel  64, 32 Jul 19 21:35 /dev/ugen2.00
crw-------  1 root  wheel  64, 33 Jul 19 21:35 /dev/ugen2.01

you can see that they are read and write only for the root user.

change permissions like this to add read and write permissions to the wheel group members:

# chmod 660 /dev/ugen2.00
# chmod 660 /dev/ugen2.01

and check that they are correctly changed:

# ls -l /dev/ugen2*

crw-rw----  1 root  wheel  64, 32 Jul 19 21:35 /dev/ugen2.00
crw-rw----  1 root  wheel  64, 33 Jul 19 21:35 /dev/ugen2.01

You can test that you can use the RTLSDR dongle as a normal user issuing this test command:

$ rtl_test
Found 1 device(s):
  0:  Realtek, RTL2838UHIDIR, SN: 00000001

Using device 0: Generic RTL2832U OEM
Found Rafael Micro R820T tuner
Supported gain values (29): 0.0 0.9 1.4 2.7 3.7 7.7 8.7 12.5 14.4 15.7 16.6 19.7 20.7 22.9 25.4 28.0 29.7 32.8 33.8 36.4 37.2 38.6 40.2 42.1 43.4 43.9 44.5 48.0 49.6
[R82XX] PLL not locked!
Sampling at 2048000 S/s.

Info: This tool will continuously read from the device, and report if
samples get lost. If you observe no further output, everything is fine.

Reading samples in async mode...
lost at least 420 bytes
lost at least 56 bytes
lost at least 432 bytes
lost at least 72 bytes
lost at least 348 bytes
lost at least 96 bytes
lost at least 372 bytes

if the normal user is not allowed to do it, you will receive the next message:

$ rtl_test
No supported devices found.

NetBSD needed "sets":

Install with sysinst or manually: base, comp, xbase, xcomp, xfont, xetc, xserver

Pkgsrc additionally installed packages:

gmake-4.4.1 =        GNU version of 'make' utility
autoconf-2.72 =      Generates automatic source code configuration scripts
libusb-compat-0.1.8  USB access library version 0 compatibility layer on top of version 1
libusb1-1.0.27  USB Access Library (version 1)
portaudio-190600.20161030nb13 Portable cross-platform audio API
pulseaudio-17.0      Sound server for POSIX and Win32 systems
alsa-lib-1.2.11 =    Advanced Linux Sound Architecture (ALSA)
alsa-plugins-oss-1.2.7.1 = Advanced Linux Sound Architecture (ALSA) - OSS plugin
alsa-plugins-pulse-1.2.7.1nb1 = Advanced Linux Sound Architecture (ALSA) - PulseAudio plugin


***Special notes for Raspberrypi4 in NetBSD***:

NetBSD 10.0 was installed in my Raspberrypi4 using the standard installation NetBSD files and flashing them into the SD card using Linux or another BSD:

http://cdn.netbsd.org/pub/NetBSD/NetBSD-10.0/evbarm-aarch64/binary/gzimg/arm64.img.gz

But I appart “slightly” from the standard installation by using this  UEFI firmware files from here:

https://github.com/pftf/RPi4/releases/download/v1.37/RPi4_UEFI_Firmware_v1.37.zip

I do not know if Linrad works in another type of system configuration, it is not tested. NetBSD gurus recommended me to install NetBSD on the Raspberrypi4 this way because of several benefits, such as removing the 3 GB RAM limit to reach the 8 GB RAM as mine has.

Then mount the SD card and unpack the UEFI firmware files over /boot directory.

Place the SD card on the raspberrypi4, connect a HDMI monitor and a keyboard and power it. Enter in the “BIOS” screen, remove the 3 GB limit and set the boot device to the SD card. "man afterboot" is your friend.

***Raspberrypi4 headless Linrad operation using TIGERVNC***
Linrad can be used remotely on a headless Raspberrypi by installing  tigervnc server package in it. Also need a VNC client in another machine on the local network. Then you can comfortably manage your raspberrypi with a full desktop like for example XFCE. You can hear audio output in raspberrypy jack connector. Audio can also be sent over the network using pulseaudio but that feature has not been tested yet in NetBSD, only in Linux. 

73

